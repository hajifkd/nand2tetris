// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array buf;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength > 0) {
            let buf = Array.new(maxLength);
        } else {
            let buf = 0;
        }

        let length = 0;

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (buf = 0) {
            return;
        }
        do buf.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return buf[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let buf[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let buf[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int sum, f, i;

        if (length = 0) {
            return 0;
        }

        let sum = 0;
        if (buf[0] = 45) {
            let f = true;
            let i = 1;
        } else {
            let f = false;
            let i = 0;
        }

        while (i < length) {
            if ((buf[i] > 47) & (buf[i] < 58)) {
                let sum = (sum * 10) + (buf[i] - 48);
            } else {
                let i = length; // break
            }

            let i = i + 1;
        }

        if (f) {
            return -sum;
        } else {
            return sum;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var Array orders;
        var int j, k;
        var boolean f;

        let orders = Array.new(5);
        let orders[0] = 10000;
        let orders[1] = 1000;
        let orders[2] = 100;
        let orders[3] = 10;
        let orders[4] = 1;
        let length = 0;

        if (val < 0) {
            let val = -val;
            do appendChar(45);
        }

        let j = 0;
        let f = false;
        while (j < 5) {
            if ((val > orders[j]) | f) {
                let f = true;
                let k = val / orders[j];
                do appendChar(k + 48);
                let val = val - (k * orders[j]);
            }

            let j = j + 1;
        }

        do orders.dispose();
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}

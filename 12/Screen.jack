// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array bitmasks;
    static Array screen;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let bitmasks = Array.new(16);
        let bitmasks[0] = 1;
        let bitmasks[1] = 2;
        let bitmasks[2] = 4;
        let bitmasks[3] = 8;
        let bitmasks[4] = 16;
        let bitmasks[5] = 32;
        let bitmasks[6] = 64;
        let bitmasks[7] = 128;
        let bitmasks[8] = 256;
        let bitmasks[9] = 512;
        let bitmasks[10] = 1024;
        let bitmasks[11] = 2048;
        let bitmasks[12] = 4096;
        let bitmasks[13] = 8192;
        let bitmasks[14] = 16384;
        let bitmasks[15] = ~32767;
        let screen = 16384;
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int r, c16;
        let r = 0;
        let c16 = 0;

        while (r < 512) {
            while (c16 < 32) {
                let screen[r * 32 + c16] = 0;
                let c16 = c16 + 1;
            }
            let r = r + 1;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int index, xdiv, xmod, s, bm;
        let xdiv = x / 16;
        let xmod = x - (xdiv * 16);
        let index = (y * 32) + xdiv;
        let s = screen[index];
        let bm = bitmasks[xmod];
        if (color) {
            let screen[index] = s | bm;
        } else {
            let screen[index] = s & (~bm);
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, adyMbdx;
        var boolean sdy;
        if (x1 > x2) {
            do Screen.drawLine(x2, y2, x1, y1);
            return;
        }

        if (x1 = x2) {
            if (y1 > y2) {
                do Screen.drawLine(x1, y2, x1, y1);
                return;
            }
            let dy = 0;

            while ((y1 + dy) < y2) {
                do Screen.drawPixel(x1, y1 + dy);
                let dy = dy + 1;
            }
            return;
        }

        if (y1 = y2) {
            let dx = 0;
            while ((x1 + dx) < x2) {
                do Screen.drawPixel(x1 + dx, y1);
                let dx = dx + 1;
            }

            return;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;
        let sdy = dy > 0;
        let a = 0;
        let b = 0;
        let adyMbdx = 0;

        while (( (a < dx) | (a = dx) ) &
                 ( (sdy    & ( (b < dy) | (b = dy) )) | 
                   ((~sdy) & ( (b > dy) | (b = dy) )) )
              ) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if (sdy) {
                if (adyMbdx < 0) {
                    let a = a + 1;
                    let adyMbdx = adyMbdx + dy;
                } else {
                    let b = b + 1;
                    let adyMbdx = adyMbdx - dx;
                }
            } else {
                if (adyMbdx < 0) {
                    let a = a + 1;
                    let adyMbdx = adyMbdx - dy;
                } else {
                    let b = b - 1;
                    let adyMbdx = adyMbdx - dx;
                }
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dy;
        let dy = 0;

        while ((y1 + dy) < y2) {
            do Screen.drawLine(x1, y1 + dy, x2, y1 + dy);
            let dy = dy + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, dx;
        let dy = -r;
        while ((dy < r) | (dy = r)) {
            let dx = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawLine(x - dx, y + dy, x + dx, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array freeList;

    /** Initializes the class. */
    function void init() {
        let freeList = 2048;
        let freeList[0] = 16383 - 2048 - 2;
        let freeList[1] = 0;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        var Array memory;
        let memory = address;
        return memory[0];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        var Array memory;
        let memory = address;
        let memory[0] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array head, prev, newHead;
        let head = freeList;
        let prev = 0;

        while (head = 0 | head[0] < size) {
            let prev = head;
            let head = head[1];
        }

        if (head = 0) {
            return -1;
        }

        let newHead = head + 2 + size;
        let newHead[0] = head - size - 2;
        let newHead[1] = head[1];
        if (prev = 0) {
            let freeList = newHead;
        } else {
            let prev[1] = newHead;
        }
        let head[0] = size;

        return head + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array head;
        let head = o - 2;
        let head[1] = freeList;
        let freeList = head;
        return;
    }    
}

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array bitmasks;

    /** Initializes the library. */
    function void init() {
        let bitmasks = Array.new(16);
        let bitmasks[0] = 1;
        let bitmasks[1] = 2;
        let bitmasks[2] = 4;
        let bitmasks[3] = 8;
        let bitmasks[4] = 16;
        let bitmasks[5] = 32;
        let bitmasks[6] = 64;
        let bitmasks[7] = 128;
        let bitmasks[8] = 256;
        let bitmasks[9] = 512;
        let bitmasks[10] = 1024;
        let bitmasks[11] = 2048;
        let bitmasks[12] = 4096;
        let bitmasks[13] = 8192;
        let bitmasks[14] = 16384;
        let bitmasks[15] = ~32767;

        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x > 0) {
            return x;
        } else {
            return -x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, i;

        if (x > y) {
            return y * x;
        }

        if (x = (~32767)) {
            return 0;
        }

        if (x < 0) {
            return - ((-x) * y);
        }

        if (y < 0) {
            return - (x * (-y));
        }

        let sum = 0;

        while (i < 15) {
            if (~((bitmasks[i] & y) = 0)) {
                let sum = sum + x;
            }
            let x = x + x;
            let i = i + 1;
        }

        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;
        if (y = (~32767)) {
            if (x = (~32767)) {
                return 1;
            } else {
                return 0;
            }
        }

        if (y < 0) {
            return -(x / (-y));
        }

        if (x < 0) {
            return -((-(x + y)) / y) - 1;
        }

        if (y > x) {
            return 0;
        }

        let q = x / (2 * y);

        if ((x - (2 * q * y)) < y) {
            return 2 * q;
        } else {
            return (2 * q) + 1;
        }

    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int xmin, xmax, xmid;

        if ((x = 0) | (x = 1)) {
            return x;
        }

        let xmin = 0;
        let xmax = 182; // 181 = sqrt(32767)

        while ((xmax - xmin) > 1) {
            let xmid = (xmin + xmax + 1) / 2;

            if ((x - (xmid * xmid)) < 0) {
                let xmax = xmid;
            } else {
                let xmin = xmid;
            }
        }

        return xmin;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > b) {
            return b;
        } else {
            return a;
        }
    }
}
